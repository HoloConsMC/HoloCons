From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Derek Lee <derek.scott.lee13@gmail.com>
Date: Sun, 12 Feb 2023 16:40:58 -0800
Subject: [PATCH] Remove profiler


diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index e92864ecf32dd984f6f87f7b05341e43af3a2977..e8fefe26428fd9b2e8d2417393bb54738a8c5ffd 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -303,9 +303,9 @@ public class Commands {
     public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label) { // CraftBukkit
         CommandSourceStack commandlistenerwrapper = (CommandSourceStack) parseresults.getContext().getSource();
 
-        commandlistenerwrapper.getServer().getProfiler().push(() -> {
+        /*commandlistenerwrapper.getServer().getProfiler().push(() -> { // HoloCons - remove profiler
             return "/" + s;
-        });
+        });*/ // HoloCons - remove profiler
 
         byte b0;
 
@@ -388,7 +388,7 @@ public class Commands {
                 b0 = 0;
             }
         } finally {
-            commandlistenerwrapper.getServer().getProfiler().pop();
+            // HoloCons - remove profiler
         }
 
         return b0;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 600252e9203c7d6b72e8ea02aa7e275249faf4bc..a9d1d283df882c15539ef7a7eedd80d900b5393f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -334,13 +334,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super("Server");
         SERVER = this; // Paper - better singleton
-        this.metricsRecorder = InactiveMetricsRecorder.INSTANCE;
+        /*this.metricsRecorder = InactiveMetricsRecorder.INSTANCE; // HoloCons - remove profiler
         this.profiler = this.metricsRecorder.getProfiler();
         this.onMetricsRecordingStopped = (methodprofilerresults) -> {
             this.stopRecordingMetrics();
         };
         this.onMetricsRecordingFinished = (path) -> {
-        };
+        };*/ // HoloCons - remove profiler
         this.status = new ServerStatus();
         this.random = RandomSource.create();
         this.port = -1;
@@ -932,9 +932,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end
         // CraftBukkit end
-        if (this.metricsRecorder.isRecording()) {
+        /*if (this.metricsRecorder.isRecording()) { // HoloCons - remove profiler
             this.cancelRecordingMetrics();
-        }
+        }*/ // HoloCons - remove profiler
 
         MinecraftServer.LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Shutdown and don't bother finishing
@@ -1160,23 +1160,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 }
                 // Spigot end
 
-                if (this.debugCommandProfilerDelayStart) {
+                /*if (this.debugCommandProfilerDelayStart) { // HoloCons - remove profiler
                     this.debugCommandProfilerDelayStart = false;
                     this.debugCommandProfiler = new MinecraftServer.TimeProfiler(Util.getNanos(), this.tickCount);
-                }
+                }*/ // HoloCons - remove profiler
 
                 //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                 lastTick = curTime;
                 this.nextTickTime += 50L;
-                this.startMetricsRecordingTick();
-                this.profiler.push("tick");
+                // HoloCons - remove profiler
+                // HoloCons - remove profiler
                 this.tickServer(this::haveTime);
-                this.profiler.popPush("nextTickWait");
+                // HoloCons - remove profiler
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
                 this.waitUntilNextTick();
-                this.profiler.pop();
-                this.endMetricsRecordingTick();
+                // HoloCons - remove profiler
+                // HoloCons - remove profiler
                 this.isReady = true;
                 JvmProfiler.INSTANCE.onServerTick(this.averageTickTime);
             }
@@ -1337,7 +1337,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public void doRunTask(TickTask ticktask) { // CraftBukkit - decompile error
-        this.getProfiler().incrementCounter("runTask");
+        // HoloCons - remove profiler
         super.doRunTask(ticktask);
     }
 
@@ -1422,7 +1422,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (playerSaveInterval < 0) {
             playerSaveInterval = autosavePeriod;
         }
-        this.profiler.push("save");
+        // HoloCons - remove profiler
         final boolean fullSave = autosavePeriod > 0 && this.tickCount % autosavePeriod == 0;
         try {
             this.isSaving = true;
@@ -1437,7 +1437,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         } finally {
             this.isSaving = false;
         }
-        this.profiler.pop();
+        // HoloCons - remove profiler
         // Paper end
         io.papermc.paper.util.CachedLists.reset(); // Paper
         // Paper start - move executeAll() into full server tick timing
@@ -1450,7 +1450,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
-        this.profiler.push("tallying");
+        // HoloCons - remove profiler
         long l = this.tickTimes[this.tickCount % 100] = Util.getNanos() - i;
 
         this.averageTickTime = this.averageTickTime * 0.8F + (float) l / 1000000.0F * 0.19999999F;
@@ -1463,7 +1463,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end
 
         this.frameTimer.logFrameDuration(i1 - i);
-        this.profiler.pop();
+        // HoloCons - remove profiler
         org.spigotmc.WatchdogThread.tick(); // Spigot
         // Paper // HoloCons - remove timings
     }
@@ -1472,11 +1472,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Spigot // Paper // HoloCons - remove timings
         this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // CraftBukkit
         // Spigot // Paper // HoloCons - remove timings
-        this.profiler.push("commandFunctions");
+        // HoloCons - remove profiler
         // Spigot // Paper // HoloCons - remove timings
         this.getFunctions().tick();
         // Spigot // Paper // HoloCons - remove timings
-        this.profiler.popPush("levels");
+        // HoloCons - remove profiler
         //Iterator iterator = this.getAllLevels().iterator(); // Paper - moved down
 
         // CraftBukkit start
@@ -1517,18 +1517,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             worldserver.hasEntityMoveEvent =  io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper
             net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = worldserver.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper
 
-            this.profiler.push(() -> {
+            /*this.profiler.push(() -> { // HoloCons - remove profiler
                 return worldserver + " " + worldserver.dimension().location();
-            });
+            });*/ // HoloCons - remove profiler
             /* Drop global time updates
             if (this.tickCount % 20 == 0) {
-                this.profiler.push("timeSync");
+                // HoloCons - remove profiler
                 this.playerList.broadcastAll(new PacketPlayOutUpdateTime(worldserver.getGameTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)), worldserver.dimension());
-                this.profiler.pop();
+                // HoloCons - remove profiler
             }
             // CraftBukkit end */
 
-            this.profiler.push("tick");
+            // HoloCons - remove profiler
 
             try {
                 // Spigot // HoloCons - remove timings
@@ -1554,17 +1554,17 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 throw new ReportedException(crashreport);
             }
 
-            this.profiler.pop();
-            this.profiler.pop();
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
         }
         this.isIteratingOverLevels = false; // Paper
 
-        this.profiler.popPush("connection");
+        // HoloCons - remove profiler
         // Spigot // HoloCons - remove timings
         this.getConnection().tick();
         // Spigot // HoloCons - remove timings
-        this.profiler.popPush("players");
+        // HoloCons - remove profiler
         // Spigot // Paper // HoloCons - remove timings
         this.playerList.tick();
         // Spigot // Paper // HoloCons - remove timings
@@ -1572,7 +1572,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             GameTestTicker.SINGLETON.tick();
         }
 
-        this.profiler.popPush("server gui refresh");
+        // HoloCons - remove profiler
 
         // Spigot // Paper // HoloCons - remove timings
         for (int i = 0; i < this.tickables.size(); ++i) {
@@ -1580,7 +1580,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Spigot // Paper // HoloCons - remove timings
 
-        this.profiler.pop();
+        // HoloCons - remove profiler
     }
 
     public boolean isNetherEnabled() {
@@ -2238,7 +2238,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public ProfilerFiller getProfiler() {
-        return this.profiler;
+        return net.minecraft.util.profiling.InactiveProfiler.INSTANCE; // HoloCons - remove profiler
     }
 
     public abstract boolean isSingleplayerOwner(GameProfile profile);
@@ -2477,7 +2477,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // CraftBukkit end
 
     private void startMetricsRecordingTick() {
-        if (this.willStartRecordingMetrics) {
+        /*if (this.willStartRecordingMetrics) { // HoloCons - remove profiler
             this.metricsRecorder = ActiveMetricsRecorder.createStarted(new ServerMetricsSamplersProvider(Util.timeSource, this.isDedicatedServer()), Util.timeSource, Util.ioPool(), new MetricsPersister("server"), this.onMetricsRecordingStopped, (path) -> {
                 this.executeBlocking(() -> {
                     this.saveDebugReport(path.resolve("server"));
@@ -2489,38 +2489,38 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.profiler = SingleTickProfiler.decorateFiller(this.metricsRecorder.getProfiler(), SingleTickProfiler.createTickProfiler("Server"));
         this.metricsRecorder.startTick();
-        this.profiler.startTick();
+        this.profiler.startTick();*/ // HoloCons - remove profiler
     }
 
     private void endMetricsRecordingTick() {
-        this.profiler.endTick();
-        this.metricsRecorder.endTick();
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
     }
 
     public boolean isRecordingMetrics() {
-        return this.metricsRecorder.isRecording();
+        return false; // HoloCons - remove profiler
     }
 
     public void startRecordingMetrics(Consumer<ProfileResults> resultConsumer, Consumer<Path> dumpConsumer) {
-        this.onMetricsRecordingStopped = (methodprofilerresults) -> {
+        /*this.onMetricsRecordingStopped = (methodprofilerresults) -> { // HoloCons - remove profiler
             this.stopRecordingMetrics();
             resultConsumer.accept(methodprofilerresults);
         };
         this.onMetricsRecordingFinished = dumpConsumer;
-        this.willStartRecordingMetrics = true;
+        this.willStartRecordingMetrics = true;*/ // HoloCons - remove profiler
     }
 
     public void stopRecordingMetrics() {
-        this.metricsRecorder = InactiveMetricsRecorder.INSTANCE;
+        // HoloCons - remove profiler
     }
 
     public void finishRecordingMetrics() {
-        this.metricsRecorder.end();
+        // HoloCons - remove profiler
     }
 
     public void cancelRecordingMetrics() {
-        this.metricsRecorder.cancel();
-        this.profiler = this.metricsRecorder.getProfiler();
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
     }
 
     public Path getWorldPath(LevelResource worldSavePath) {
@@ -2569,15 +2569,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public boolean isTimeProfilerRunning() {
-        return this.debugCommandProfilerDelayStart || this.debugCommandProfiler != null;
+        return false; // HoloCons - remove profiler
     }
 
     public void startTimeProfiler() {
-        this.debugCommandProfilerDelayStart = true;
+        // HoloCons - remove profiler
     }
 
     public ProfileResults stopTimeProfiler() {
-        if (this.debugCommandProfiler == null) {
+        if (true) { // HoloCons - remove profiler
             return EmptyProfileResults.EMPTY;
         } else {
             ProfileResults methodprofilerresults = this.debugCommandProfiler.stop(Util.getNanos(), this.tickCount);
diff --git a/src/main/java/net/minecraft/server/ServerFunctionManager.java b/src/main/java/net/minecraft/server/ServerFunctionManager.java
index fe8d62e90acc5d6ac58b724822694d8383c4dea0..18fb86b307546d562197461184a1a831e5199fa7 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionManager.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionManager.java
@@ -57,10 +57,10 @@ public class ServerFunctionManager {
     }
 
     private void executeTagFunctions(Collection<CommandFunction> functions, ResourceLocation label) {
-        ProfilerFiller gameprofilerfiller = this.server.getProfiler();
+        // HoloCons - remove profiler
 
         Objects.requireNonNull(label);
-        gameprofilerfiller.push(label::toString);
+        // HoloCons - remove profiler
         Iterator iterator = functions.iterator();
 
         while (iterator.hasNext()) {
@@ -69,7 +69,7 @@ public class ServerFunctionManager {
             this.execute(customfunction, this.getGameLoopSender());
         }
 
-        this.server.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     public int execute(CommandFunction function, CommandSourceStack source) {
@@ -177,10 +177,10 @@ public class ServerFunctionManager {
 
                 try {
                     ServerFunctionManager.QueuedCommand customfunctiondata_b = (ServerFunctionManager.QueuedCommand) this.commandQueue.removeFirst();
-                    ProfilerFiller gameprofilerfiller = ServerFunctionManager.this.server.getProfiler();
+                    // HoloCons - remove profiler
 
                     Objects.requireNonNull(customfunctiondata_b);
-                    gameprofilerfiller.push(customfunctiondata_b::toString);
+                    // HoloCons - remove profiler
                     this.depth = customfunctiondata_b.depth;
                     customfunctiondata_b.execute(ServerFunctionManager.this, this.commandQueue, i, this.tracer);
                     if (!this.nestedCalls.isEmpty()) {
@@ -192,7 +192,7 @@ public class ServerFunctionManager {
                         this.nestedCalls.clear();
                     }
                 } finally {
-                    ServerFunctionManager.this.server.getProfiler().pop();
+                    // HoloCons - remove profiler
                 }
 
                 ++j;
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index f78829e825a938d0981287dba73d5ee2bb2a7e22..74626951d3727211c3226b03496efe265a56da92 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -618,20 +618,20 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     protected void tick(BooleanSupplier shouldKeepTicking) {
-        ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+        // HoloCons - remove profiler
 
         { // Paper // HoloCons - remove timings
-        gameprofilerfiller.push("poi");
+        // HoloCons - remove profiler
         this.poiManager.tick(shouldKeepTicking);
         } // Paper
-        gameprofilerfiller.popPush("chunk_unload");
+        // HoloCons - remove profiler
         if (!this.level.noSave()) {
             { // Paper // HoloCons - remove timings
             this.processUnloads(shouldKeepTicking);
             } // Paper
         }
 
-        gameprofilerfiller.pop();
+        // HoloCons - remove profiler
     }
 
     public boolean hasWork() {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index bb94fd55ab392d4409c46878cf4ce0c235f099e4..16d9e85128b3e739c08fd646e90cc2ade1f865f3 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -428,16 +428,16 @@ public class ServerChunkCache extends ChunkSource {
                 return ifLoaded;
             }
             // Paper end
-            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+            // HoloCons - remove profiler
 
-            gameprofilerfiller.incrementCounter("getChunk");
+            // HoloCons - remove profiler
             long k = ChunkPos.asLong(x, z);
 
             ChunkAccess ichunkaccess;
 
             // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
-            gameprofilerfiller.incrementCounter("getChunkCacheMiss");
+            // HoloCons - remove profiler
             CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
             ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
@@ -625,24 +625,24 @@ public class ServerChunkCache extends ChunkSource {
     // CraftBukkit start - modelled on below
     public void purgeUnload() {
         if (true) return; // Paper - tickets will be removed later, this behavior isn't really well accounted for by the chunk system
-        this.level.getProfiler().push("purge");
+        // HoloCons - remove profiler
         this.distanceManager.purgeStaleTickets();
         this.runDistanceManagerUpdates();
-        this.level.getProfiler().popPush("unload");
+        // HoloCons - remove profiler
         this.chunkMap.tick(() -> true);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         this.clearCache();
     }
     // CraftBukkit end
 
     @Override
     public void tick(BooleanSupplier shouldKeepTicking, boolean tickChunks) {
-        this.level.getProfiler().push("purge");
+        // HoloCons - remove profiler
         // Spigot // HoloCons - remove timings
         this.distanceManager.purgeStaleTickets();
         this.runDistanceManagerUpdates();
         // Spigot // HoloCons - remove timings
-        this.level.getProfiler().popPush("chunks");
+        // HoloCons - remove profiler
         if (tickChunks) {
             // Paper - timings // HoloCons - remove timings
             this.chunkMap.playerChunkManager.tick(); // Paper - this is mostly is to account for view distance changes
@@ -651,10 +651,10 @@ public class ServerChunkCache extends ChunkSource {
         }
 
         // Spigot // HoloCons - remove timings
-        this.level.getProfiler().popPush("unload");
+        // HoloCons - remove profiler
         this.chunkMap.tick(shouldKeepTicking);
         // Spigot // HoloCons - remove timings
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         this.clearCache();
     }
 
@@ -700,13 +700,13 @@ public class ServerChunkCache extends ChunkSource {
             }
             // Paper end - optimize isOutisdeRange
             LevelData worlddata = this.level.getLevelData();
-            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+            // HoloCons - remove profiler
 
-            gameprofilerfiller.push("pollingChunks");
+            // HoloCons - remove profiler
             int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
             boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && worlddata.getGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
 
-            gameprofilerfiller.push("naturalSpawnCount");
+            // HoloCons - remove profiler
             // Paper - timings // HoloCons - remove timings
             int l = this.distanceManager.getNaturalSpawnChunkCount();
             // Paper start - per player mob spawning
@@ -724,13 +724,13 @@ public class ServerChunkCache extends ChunkSource {
             // Paper - timings // HoloCons - remove timings
 
             this.lastSpawnState = spawnercreature_d;
-            gameprofilerfiller.popPush("filteringLoadedChunks");
+            // HoloCons - remove profiler
             // Paper - moved down
             // Paper // HoloCons - remove timings
 
             // Paper - moved down
 
-            gameprofilerfiller.popPush("spawnAndTick");
+            // HoloCons - remove profiler
             boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
 
             // Paper - only shuffle if per-player mob spawning is disabled
@@ -781,15 +781,15 @@ public class ServerChunkCache extends ChunkSource {
             }
             // Paper end - optimise chunk tick iteration
             // Paper // HoloCons - remove timings
-            gameprofilerfiller.popPush("customSpawners");
+            // HoloCons - remove profiler
             if (flag2) {
                 { // Paper - timings // HoloCons - remove timings
                 this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
                 } // Paper - timings
             }
-            gameprofilerfiller.pop();
+            // HoloCons - remove profiler
             // Paper start - use set of chunks requiring updates, rather than iterating every single one loaded
-            gameprofilerfiller.popPush("broadcast");
+            // HoloCons - remove profiler
             // Paper - timing // HoloCons - remove timings
             if (!this.chunkMap.needsChangeBroadcasting.isEmpty()) {
                 ReferenceOpenHashSet<ChunkHolder> copy = this.chunkMap.needsChangeBroadcasting.clone();
@@ -803,7 +803,7 @@ public class ServerChunkCache extends ChunkSource {
                 }
             }
             // Paper - timing // HoloCons - remove timings
-            gameprofilerfiller.pop();
+            // HoloCons - remove profiler
             // Paper end - use set of chunks requiring updates, rather than iterating every single one loaded
             // Paper start - controlled flush for entity tracker packets
             List<net.minecraft.network.Connection> disabledFlushes = new java.util.ArrayList<>(this.level.players.size());
@@ -994,7 +994,7 @@ public class ServerChunkCache extends ChunkSource {
 
         @Override
         protected void doRunTask(Runnable task) {
-            ServerChunkCache.this.level.getProfiler().incrementCounter("runTask");
+            // HoloCons - remove profiler
             super.doRunTask(task);
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 686e5a75ffb24a3b1f62d5446e2bcf66b02f6da0..6e6492de645d342bb92aec848f4271784fbed763 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -633,12 +633,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
         }
         // Paper end - optimise checkDespawn
-        ProfilerFiller gameprofilerfiller = this.getProfiler();
+        // HoloCons - remove profiler
 
         this.handlingTick = true;
-        gameprofilerfiller.push("world border");
+        // HoloCons - remove profiler
         this.getWorldBorder().tick();
-        gameprofilerfiller.popPush("weather");
+        // HoloCons - remove profiler
         this.advanceWeatherCycle();
         int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
@@ -665,32 +665,32 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         this.updateSkyBrightness();
         this.tickTime();
-        gameprofilerfiller.popPush("tickPending");
+        // HoloCons - remove profiler
         // Paper // HoloCons - remove timings
         if (!this.isDebug()) {
             j = this.getGameTime();
-            gameprofilerfiller.push("blockTicks");
+            // HoloCons - remove profiler
             this.blockTicks.tick(j, 65536, this::tickBlock);
-            gameprofilerfiller.popPush("fluidTicks");
+            // HoloCons - remove profiler
             this.fluidTicks.tick(j, 65536, this::tickFluid);
-            gameprofilerfiller.pop();
+            // HoloCons - remove profiler
         }
         // Paper // HoloCons - remove timings
 
-        gameprofilerfiller.popPush("raid");
+        // HoloCons - remove profiler
         // Paper - timings // HoloCons - remove timings
         this.raids.tick();
         // Paper - timings // HoloCons - remove timings
-        gameprofilerfiller.popPush("chunkSource");
+        // HoloCons - remove profiler
         // Paper - timings // HoloCons - remove timings
         this.getChunkSource().tick(shouldKeepTicking, true);
         // Paper - timings // HoloCons - remove timings
-        gameprofilerfiller.popPush("blockEvents");
+        // HoloCons - remove profiler
         // Spigot // HoloCons - remove timings
         this.runBlockEvents();
         // Spigot // HoloCons - remove timings
         this.handlingTick = false;
-        gameprofilerfiller.pop();
+        // HoloCons - remove profiler
         boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
 
         if (flag) {
@@ -698,12 +698,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         if (flag || this.emptyTime++ < 300) {
-            gameprofilerfiller.push("entities");
+            // HoloCons - remove profiler
             // Spigot // HoloCons - remove timings
             if (this.dragonFight != null) {
-                gameprofilerfiller.push("dragonFight");
+                // HoloCons - remove profiler
                 this.dragonFight.tick();
-                gameprofilerfiller.pop();
+                // HoloCons - remove profiler
             }
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
@@ -713,9 +713,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
                     } else {
-                        gameprofilerfiller.push("checkDespawn");
+                        // HoloCons - remove profiler
                         entity.checkDespawn();
-                        gameprofilerfiller.pop();
+                        // HoloCons - remove profiler
                         if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
                             Entity entity1 = entity.getVehicle();
 
@@ -727,22 +727,22 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                 entity.stopRiding();
                             }
 
-                            gameprofilerfiller.push("tick");
+                            // HoloCons - remove profiler
                             this.guardEntityTick(this::tickNonPassenger, entity);
-                            gameprofilerfiller.pop();
+                            // HoloCons - remove profiler
                         }
                     }
                 }
             });
             // Spigot // HoloCons - remove timings
             // Spigot // HoloCons - remove timings
-            gameprofilerfiller.pop();
+            // HoloCons - remove profiler
             this.tickBlockEntities();
         }
 
-        gameprofilerfiller.push("entityManagement");
+        // HoloCons - remove profiler
         //this.entityManager.tick(); // Paper - rewrite chunk system
-        gameprofilerfiller.pop();
+        // HoloCons - remove profiler
     }
 
     @Override
@@ -801,9 +801,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
         boolean flag = this.isRaining();
         int j = chunkcoordintpair.getMinBlockX();
         int k = chunkcoordintpair.getMinBlockZ();
-        ProfilerFiller gameprofilerfiller = this.getProfiler();
+        // HoloCons - remove profiler
 
-        gameprofilerfiller.push("thunder");
+        // HoloCons - remove profiler
         final BlockPos.MutableBlockPos blockposition = this.chunkTickMutablePosition; // Paper - use mutable to reduce allocation rate, final to force compile fail on change
 
         if (!this.paperConfig().environment.disableThunder && flag && this.isThundering() && this.spigotConfig.thunderChance > 0 && this.random.nextInt(this.spigotConfig.thunderChance) == 0) { // Spigot // Paper - disable thunder
@@ -833,7 +833,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
         }
 
-        gameprofilerfiller.popPush("iceandsnow");
+        // HoloCons - remove profiler
         int l;
 
         if (!this.paperConfig().environment.disableIceAndSnow && this.random.nextInt(16) == 0) { // Paper - Disable ice and snow
@@ -885,7 +885,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         // Paper start - optimise random block ticking
-        gameprofilerfiller.popPush("randomTick");
+        // HoloCons - remove profiler
         // Paper // HoloCons - remove timings
         if (randomTickSpeed > 0) {
             LevelChunkSection[] sections = chunk.getSections();
@@ -921,7 +921,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
         // Paper end - optimise random block ticking
         // Paper // HoloCons - remove timings
-        gameprofilerfiller.pop();
+        // HoloCons - remove profiler
     }
 
     public Optional<BlockPos> findLightningRod(BlockPos pos) {
@@ -1199,19 +1199,19 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // HoloCons - remove timings
         // Paper end - timings
         entity.setOldPosAndRot();
-        ProfilerFiller gameprofilerfiller = this.getProfiler();
+        // HoloCons - remove profiler
 
         ++entity.tickCount;
-        this.getProfiler().push(() -> {
+        /*this.getProfiler().push(() -> { // HoloCons - remove profiler
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
         });
-        gameprofilerfiller.incrementCounter("tickNonPassenger");
+        gameprofilerfiller.incrementCounter("tickNonPassenger");*/ // HoloCons - remove profiler
         if (isActive) { // Paper - EAR 2
             TimingHistory.activatedEntityTicks++;
         entity.tick();
         entity.postTick(); // CraftBukkit
         } else { entity.inactiveTick(); } // Paper - EAR 2
-        this.getProfiler().pop();
+        // HoloCons - remove profiler
         // Paper - timings // HoloCons - remove timings
         Iterator iterator = entity.getPassengers().iterator();
 
@@ -1240,12 +1240,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // Paper end
                 passenger.setOldPosAndRot();
                 ++passenger.tickCount;
-                ProfilerFiller gameprofilerfiller = this.getProfiler();
+                // HoloCons - remove profiler
 
-                gameprofilerfiller.push(() -> {
+                /*gameprofilerfiller.push(() -> { // HoloCons - remove profiler
                     return BuiltInRegistries.ENTITY_TYPE.getKey(passenger.getType()).toString();
                 });
-                gameprofilerfiller.incrementCounter("tickPassenger");
+                gameprofilerfiller.incrementCounter("tickPassenger");*/ // HoloCons - remove profiler
                 // Paper start - EAR 2
                 if (isActive) {
                 passenger.rideTick();
@@ -1257,7 +1257,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     vehicle.positionRider(passenger);
                 }
                 // Paper end - EAR 2
-                gameprofilerfiller.pop();
+                // HoloCons - remove profiler
                 Iterator iterator = passenger.getPassengers().iterator();
 
                 while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 289429eb464548acc80262a49444f49f8f57fc0c..a2fe59d19f47733176ca1af59c9002c0fc15d00c 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1149,7 +1149,7 @@ public class ServerPlayer extends Player {
             PortalInfo shapedetectorshape = this.findDimensionEntryPoint(worldserver);
 
             if (shapedetectorshape != null) {
-                worldserver1.getProfiler().push("moving");
+                // HoloCons - remove profiler
                 worldserver = shapedetectorshape.world; // CraftBukkit
                 if (worldserver == null) { } else // CraftBukkit - empty to fall through to null to event
                 if (resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit
@@ -1172,8 +1172,8 @@ public class ServerPlayer extends Player {
             worldserver = ((CraftWorld) exit.getWorld()).getHandle();
             // CraftBukkit end
 
-            worldserver1.getProfiler().pop();
-            worldserver1.getProfiler().push("placing");
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             if (true) { // CraftBukkit
                 this.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
 
@@ -1191,7 +1191,7 @@ public class ServerPlayer extends Player {
                 this.connection.teleport(exit); // CraftBukkit - use internal teleport without event
                 this.connection.resetPosition();
                 worldserver.addDuringPortalTeleport(this);
-                worldserver1.getProfiler().pop();
+                // HoloCons - remove profiler
                 this.triggerDimensionChangeTriggers(worldserver1);
                 this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
                 playerlist.sendLevelInfo(this, worldserver);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 4f3863b3f0d4d6be7b9183d50c8aa5bc1ea2a7bd..3f84d5ec51d83c07c354b95cd9b42467693e73b2 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -390,7 +390,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.aboveGroundVehicleTickCount = 0;
         }
 
-        this.server.getProfiler().push("keepAlive");
+        // HoloCons - remove profiler
         // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
         // This should effectively place the keepalive handling back to "as it was" before 1.12.2
         long currentTime = Util.getMillis();
@@ -411,7 +411,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
         // Paper end
 
-        this.server.getProfiler().pop();
+        // HoloCons - remove profiler
         // CraftBukkit start
         for (int spam; (spam = this.chatSpamTickCount.get()) > 0 && !this.chatSpamTickCount.compareAndSet(spam, spam - 1); ) ;
         if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
diff --git a/src/main/java/net/minecraft/server/packs/resources/ResourceManagerReloadListener.java b/src/main/java/net/minecraft/server/packs/resources/ResourceManagerReloadListener.java
index 9ddbfcf80d9a381dace78a62880f85a4d767e0eb..2a6e59c3858aa497d409e49e27b0a56fa87514ae 100644
--- a/src/main/java/net/minecraft/server/packs/resources/ResourceManagerReloadListener.java
+++ b/src/main/java/net/minecraft/server/packs/resources/ResourceManagerReloadListener.java
@@ -9,11 +9,11 @@ public interface ResourceManagerReloadListener extends PreparableReloadListener
     @Override
     default CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier synchronizer, ResourceManager manager, ProfilerFiller prepareProfiler, ProfilerFiller applyProfiler, Executor prepareExecutor, Executor applyExecutor) {
         return synchronizer.wait(Unit.INSTANCE).thenRunAsync(() -> {
-            applyProfiler.startTick();
-            applyProfiler.push("listener");
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             this.onResourceManagerReload(manager);
-            applyProfiler.pop();
-            applyProfiler.endTick();
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
         }, applyExecutor);
     }
 
diff --git a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
index 6d96da16f25e2359e053c45270310886e168f828..df3d794050ad17042edb5bad813b5ab1c85e9b6f 100644
--- a/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
+++ b/src/main/java/net/minecraft/util/profiling/ActiveProfiler.java
@@ -55,7 +55,7 @@ public class ActiveProfiler implements ProfileCollector {
             this.started = true;
             this.path = "";
             this.paths.clear();
-            this.push("root");
+            // HoloCons - remove profiler
         }
     }
 
@@ -64,7 +64,7 @@ public class ActiveProfiler implements ProfileCollector {
         if (!this.started) {
             LOGGER.error("Profiler tick already ended - missing startTick()?");
         } else {
-            this.pop();
+            // HoloCons - remove profiler
             this.started = false;
             if (!this.path.isEmpty()) {
                 LOGGER.error("Profiler tick ended before path was fully popped (remainder: '{}'). Mismatched push/pop?", LogUtils.defer(() -> {
@@ -93,7 +93,7 @@ public class ActiveProfiler implements ProfileCollector {
 
     @Override
     public void push(Supplier<String> locationGetter) {
-        this.push(locationGetter.get());
+        // HoloCons - remove profiler
     }
 
     @Override
@@ -132,14 +132,14 @@ public class ActiveProfiler implements ProfileCollector {
 
     @Override
     public void popPush(String location) {
-        this.pop();
-        this.push(location);
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
     }
 
     @Override
     public void popPush(Supplier<String> locationGetter) {
-        this.pop();
-        this.push(locationGetter);
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
     }
 
     private ActiveProfiler.PathEntry getCurrentEntry() {
diff --git a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
index 5725c6593480fada65facc29664a00a8cc073512..653dee143aa73f15b49e31e34a5fd24f7ad28aa2 100644
--- a/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
+++ b/src/main/java/net/minecraft/util/profiling/ProfilerFiller.java
@@ -6,32 +6,44 @@ import net.minecraft.util.profiling.metrics.MetricCategory;
 public interface ProfilerFiller {
     String ROOT = "root";
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void startTick();
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void endTick();
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void push(String location);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void push(Supplier<String> locationGetter);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void pop();
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void popPush(String location);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void popPush(Supplier<String> locationGetter);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void markForCharting(MetricCategory type);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     default void incrementCounter(String marker) {
-        this.incrementCounter(marker, 1);
+        // HoloCons - remove profiler
     }
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void incrementCounter(String marker, int i);
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     default void incrementCounter(Supplier<String> markerGetter) {
-        this.incrementCounter(markerGetter, 1);
+        // HoloCons - remove profiler
     }
 
+    @io.papermc.paper.annotation.DoNotUse // HoloCons - remove profiler
     void incrementCounter(Supplier<String> markerGetter, int i);
 
     static ProfilerFiller tee(final ProfilerFiller a, final ProfilerFiller b) {
@@ -41,62 +53,62 @@ public interface ProfilerFiller {
             return b == InactiveProfiler.INSTANCE ? a : new ProfilerFiller() {
                 @Override
                 public void startTick() {
-                    a.startTick();
-                    b.startTick();
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void endTick() {
-                    a.endTick();
-                    b.endTick();
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void push(String location) {
-                    a.push(location);
-                    b.push(location);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void push(Supplier<String> locationGetter) {
-                    a.push(locationGetter);
-                    b.push(locationGetter);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void markForCharting(MetricCategory type) {
-                    a.markForCharting(type);
-                    b.markForCharting(type);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void pop() {
-                    a.pop();
-                    b.pop();
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void popPush(String location) {
-                    a.popPush(location);
-                    b.popPush(location);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void popPush(Supplier<String> locationGetter) {
-                    a.popPush(locationGetter);
-                    b.popPush(locationGetter);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void incrementCounter(String marker, int i) {
-                    a.incrementCounter(marker, i);
-                    b.incrementCounter(marker, i);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
 
                 @Override
                 public void incrementCounter(Supplier<String> markerGetter, int i) {
-                    a.incrementCounter(markerGetter, i);
-                    b.incrementCounter(markerGetter, i);
+                    // HoloCons - remove profiler
+                    // HoloCons - remove profiler
                 }
             };
         }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1eaab1f6923e6aa34b643293347348e5cc19af3c..f9217128a07d768069f1781b9e6802d785500ee7 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -788,7 +788,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // CraftBukkit end
 
     public void baseTick() {
-        this.level.getProfiler().push("entityBaseTick");
+        // HoloCons - remove profiler
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Update last hurt when ticking
         this.feetBlockState = null;
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
@@ -849,7 +849,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         }
 
         this.firstTick = false;
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     public void setSharedFlagOnFire(boolean onFire) {
@@ -1023,7 +1023,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 }
             }
 
-            this.level.getProfiler().push("move");
+            // HoloCons - remove profiler
             if (this.stuckSpeedMultiplier.lengthSqr() > 1.0E-7D) {
                 movement = movement.multiply(this.stuckSpeedMultiplier);
                 this.stuckSpeedMultiplier = Vec3.ZERO;
@@ -1032,7 +1032,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             // Paper start - ignore movement changes while inactive.
             if (isTemporarilyActive && !(this instanceof ItemEntity || this instanceof net.minecraft.world.entity.vehicle.AbstractMinecart) && movement == getDeltaMovement() && movementType == MoverType.SELF) {
                 setDeltaMovement(Vec3.ZERO);
-                this.level.getProfiler().pop();
+                // HoloCons - remove profiler
                 return;
             }
             // Paper end
@@ -1053,8 +1053,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 this.setPos(this.getX() + vec3d1.x, this.getY() + vec3d1.y, this.getZ() + vec3d1.z);
             }
 
-            this.level.getProfiler().pop();
-            this.level.getProfiler().push("rest");
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             boolean flag = !Mth.equal(movement.x, vec3d1.x);
             boolean flag1 = !Mth.equal(movement.z, vec3d1.z);
 
@@ -1073,7 +1073,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
             this.checkFallDamage(vec3d1.y, this.onGround, iblockdata, blockposition);
             if (this.isRemoved()) {
-                this.level.getProfiler().pop();
+                // HoloCons - remove profiler
             } else {
                 if (this.horizontalCollision) {
                     Vec3 vec3d2 = this.getDeltaMovement();
@@ -1214,7 +1214,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                     this.setRemainingFireTicks(-this.getFireImmuneTicks());
                 }
 
-                this.level.getProfiler().pop();
+                // HoloCons - remove profiler
             }
         }
         // Paper start - detailed watchdog information
@@ -2894,7 +2894,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 ServerLevel worldserver1 = minecraftserver.getLevel(resourcekey);
 
                 if (true && !this.isPassenger() && this.portalTime++ >= i) { // CraftBukkit
-                    this.level.getProfiler().push("portal");
+                    // HoloCons - remove profiler
                     this.portalTime = i;
                     // Paper start
                     io.papermc.paper.event.entity.EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), worldserver1 == null ? null : worldserver1.getWorld(), org.bukkit.PortalType.NETHER);
@@ -2912,7 +2912,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                     }
                     } // Paper
                     // CraftBukkit end
-                    this.level.getProfiler().pop();
+                    // HoloCons - remove profiler
                 }
 
                 this.isInsidePortal = false;
@@ -3377,14 +3377,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         }
         // Paper end
         if (this.level instanceof ServerLevel && !this.isRemoved()) {
-            this.level.getProfiler().push("changeDimension");
+            // HoloCons - remove profiler
             // CraftBukkit start
             // this.decouple();
             if (worldserver == null) {
                 return null;
             }
             // CraftBukkit end
-            this.level.getProfiler().push("reposition");
+            // HoloCons - remove profiler
             PortalInfo shapedetectorshape = (location == null) ? this.findDimensionEntryPoint(worldserver) : new PortalInfo(new Vec3(location.x(), location.y(), location.z()), Vec3.ZERO, this.yRot, this.xRot, worldserver, null); // CraftBukkit
 
             if (shapedetectorshape == null) {
@@ -3418,7 +3418,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 this.unRide();
                 // CraftBukkit end
 
-                this.level.getProfiler().popPush("reloading");
+                // HoloCons - remove profiler
                 // Paper start - Change lead drop timing to prevent dupe
                 if (this instanceof Mob) {
                     ((Mob) this).dropLeash(true, true); // Paper drop lead
@@ -3441,10 +3441,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 }
 
                 this.removeAfterChangingDimensions();
-                this.level.getProfiler().pop();
+                // HoloCons - remove profiler
                 ((ServerLevel) this.level).resetEmptyTime();
                 worldserver.resetEmptyTime();
-                this.level.getProfiler().pop();
+                // HoloCons - remove profiler
                 return entity;
             }
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 42eb78830855d7282b7f3f1bdbe85e632d489784..ac8f95345582f6a8e930626b7da50629fcab9ce6 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -393,7 +393,7 @@ public abstract class LivingEntity extends Entity {
         }
 
         super.baseTick();
-        this.level.getProfiler().push("livingEntityBaseTick");
+        // HoloCons - remove profiler
         if (this.fireImmune() || this.level.isClientSide) {
             this.clearFire();
         }
@@ -495,7 +495,7 @@ public abstract class LivingEntity extends Entity {
         this.yHeadRotO = this.yHeadRot;
         this.yRotO = this.getYRot();
         this.xRotO = this.getXRot();
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     public boolean canSpawnSoulSpeedParticle() {
@@ -3040,10 +3040,10 @@ public abstract class LivingEntity extends Entity {
         }
 
         this.run += (f3 - this.run) * 0.3F;
-        this.level.getProfiler().push("headTurn");
+        // HoloCons - remove profiler
         f2 = this.tickHeadTurn(f1, f2);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("rangeChecks");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
 
         // Paper start - stop large pitch and yaw changes from crashing the server
         this.yRotO += Math.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F;
@@ -3055,7 +3055,7 @@ public abstract class LivingEntity extends Entity {
         this.yHeadRotO += Math.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F;
         // Paper end
 
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         this.animStep += f2;
         if (this.isFallFlying()) {
             ++this.fallFlyTicks;
@@ -3352,19 +3352,19 @@ public abstract class LivingEntity extends Entity {
         }
 
         this.setDeltaMovement(d4, d5, d6);
-        this.level.getProfiler().push("ai");
+        // HoloCons - remove profiler
         if (this.isImmobile()) {
             this.jumping = false;
             this.xxa = 0.0F;
             this.zza = 0.0F;
         } else if (this.isEffectiveAi()) {
-            this.level.getProfiler().push("newAi");
+            // HoloCons - remove profiler
             this.serverAiStep();
-            this.level.getProfiler().pop();
+            // HoloCons - remove profiler
         }
 
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("jump");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         if (this.jumping && this.isAffectedByFluids()) {
             double d7;
 
@@ -3391,8 +3391,8 @@ public abstract class LivingEntity extends Entity {
             this.noJumpDelay = 0;
         }
 
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("travel");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         this.xxa *= 0.98F;
         this.zza *= 0.98F;
         this.updateFallFlying();
@@ -3401,8 +3401,8 @@ public abstract class LivingEntity extends Entity {
         // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
         this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
         // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("freezing");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         boolean flag1 = this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES);
         int i;
 
@@ -3422,15 +3422,15 @@ public abstract class LivingEntity extends Entity {
             this.hurt(DamageSource.FREEZE, (float) i);
         }
 
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("push");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         if (this.autoSpinAttackTicks > 0) {
             --this.autoSpinAttackTicks;
             this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
         }
 
         this.pushEntities();
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         // Paper start
         if (((ServerLevel) this.level).hasEntityMoveEvent && !(this instanceof net.minecraft.world.entity.player.Player)) {
             if (this.xo != getX() || this.yo != this.getY() || this.zo != this.getZ() || this.yRotO != this.getYRot() || this.xRotO != this.getXRot()) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 49b983064ea810382b6112f5dc7f93ba4e5710bd..b178f94cd07c67eb349ff321287e4f20b1fcbdad 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -327,13 +327,13 @@ public abstract class Mob extends LivingEntity {
     @Override
     public void baseTick() {
         super.baseTick();
-        this.level.getProfiler().push("mobBaseTick");
+        // HoloCons - remove profiler
         if (this.isAlive() && this.random.nextInt(1000) < this.ambientSoundTime++) {
             this.resetAmbientSoundTime();
             this.playAmbientSound();
         }
 
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     @Override
@@ -638,7 +638,7 @@ public abstract class Mob extends LivingEntity {
     @Override
     public void aiStep() {
         super.aiStep();
-        this.level.getProfiler().push("looting");
+        // HoloCons - remove profiler
         if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             Vec3i baseblockposition = this.getPickupReach();
             List<ItemEntity> list = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ()));
@@ -658,7 +658,7 @@ public abstract class Mob extends LivingEntity {
             }
         }
 
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     protected Vec3i getPickupReach() {
@@ -871,42 +871,42 @@ public abstract class Mob extends LivingEntity {
             return;
         }
         // Paper end
-        this.level.getProfiler().push("sensing");
+        // HoloCons - remove profiler
         this.sensing.tick();
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         int i = this.level.getServer().getTickCount() + this.getId();
 
         if (i % 2 != 0 && this.tickCount > 1) {
-            this.level.getProfiler().push("targetSelector");
+            // HoloCons - remove profiler
             this.targetSelector.tickRunningGoals(false);
-            this.level.getProfiler().pop();
-            this.level.getProfiler().push("goalSelector");
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             this.goalSelector.tickRunningGoals(false);
-            this.level.getProfiler().pop();
+            // HoloCons - remove profiler
         } else {
-            this.level.getProfiler().push("targetSelector");
+            // HoloCons - remove profiler
             this.targetSelector.tick();
-            this.level.getProfiler().pop();
-            this.level.getProfiler().push("goalSelector");
+            // HoloCons - remove profiler
+            // HoloCons - remove profiler
             this.goalSelector.tick();
-            this.level.getProfiler().pop();
+            // HoloCons - remove profiler
         }
 
-        this.level.getProfiler().push("navigation");
+        // HoloCons - remove profiler
         this.navigation.tick();
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("mob tick");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         this.customServerAiStep();
-        this.level.getProfiler().pop();
+        /*this.level.getProfiler().pop(); // HoloCons - remove profiler
         this.level.getProfiler().push("controls");
-        this.level.getProfiler().push("move");
+        this.level.getProfiler().push("move");*/ // HoloCons - remove profiler
         this.moveControl.tick();
-        this.level.getProfiler().popPush("look");
+        // HoloCons - remove profiler
         this.lookControl.tick();
-        this.level.getProfiler().popPush("jump");
+        // HoloCons - remove profiler
         this.jumpControl.tick();
-        this.level.getProfiler().pop();
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         this.sendDebugPackets();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index b738ee2d3801fadfd09313f05ae24593e56b0ec6..6d6cdb8e3f627c6e7ee291d9bceb0754088a4c8f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -102,8 +102,8 @@ public class GoalSelector {
     }
 
     public void tick() {
-        ProfilerFiller profilerFiller = this.profiler.get();
-        profilerFiller.push("goalCleanup");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
 
         for(WrappedGoal wrappedGoal : this.availableGoals) {
             if (wrappedGoal.isRunning() && (goalContainsAnyFlags(wrappedGoal, this.goalTypes) || !wrappedGoal.canContinueToUse())) {
@@ -120,8 +120,8 @@ public class GoalSelector {
             }
         }
 
-        profilerFiller.pop();
-        profilerFiller.push("goalUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
 
         for(WrappedGoal wrappedGoal2 : this.availableGoals) {
             // Paper start
@@ -141,13 +141,13 @@ public class GoalSelector {
             }
         }
 
-        profilerFiller.pop();
+        // HoloCons - remove profiler
         this.tickRunningGoals(true);
     }
 
     public void tickRunningGoals(boolean tickAll) {
-        ProfilerFiller profilerFiller = this.profiler.get();
-        profilerFiller.push("goalTick");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
 
         for(WrappedGoal wrappedGoal : this.availableGoals) {
             if (wrappedGoal.isRunning() && (tickAll || wrappedGoal.requiresUpdateEveryTick())) {
@@ -155,7 +155,7 @@ public class GoalSelector {
             }
         }
 
-        profilerFiller.pop();
+        // HoloCons - remove profiler
     }
 
     public Set<WrappedGoal> getAvailableGoals() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 97257b450e848f53fdb9b5b7affa57b03ea5f459..c41bc9c4f55c2fdceee0994ff36cff4d1e9afb9f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -171,12 +171,12 @@ public abstract class PathNavigation {
                 }
             }
             // Paper end
-            this.level.getProfiler().push("pathfind");
+            // HoloCons - remove profiler
             BlockPos blockPos = useHeadPos ? this.mob.blockPosition().above() : this.mob.blockPosition();
             int i = (int)(followRange + (float)range);
             PathNavigationRegion pathNavigationRegion = new PathNavigationRegion(this.level, blockPos.offset(-i, -i, -i), blockPos.offset(i, i, i));
             Path path = this.pathFinder.findPath(pathNavigationRegion, this.mob, positions, followRange, distance, this.maxVisitedNodesMultiplier);
-            this.level.getProfiler().pop();
+            // HoloCons - remove profiler
             if (path != null && path.getTarget() != null) {
                 this.targetPos = path.getTarget();
                 this.reachRange = distance;
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
index 288c6627906d07c0d223eacd84ae4eb31a349998..cc37fcd5cecadc27b780b0d1bf7f460ab327e2d2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensing.java
@@ -26,9 +26,9 @@ public class Sensing {
         } else if (this.unseen.contains(i)) {
             return false;
         } else {
-            this.mob.level.getProfiler().push("hasLineOfSight");
+            // HoloCons - remove profiler
             boolean bl = this.mob.hasLineOfSight(entity);
-            this.mob.level.getProfiler().pop();
+            // HoloCons - remove profiler
             if (bl) {
                 this.seen.add(i);
             } else {
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index c0084b1f146a4697194c421519537e612ff737c0..5506ad1395ea8093fcad0434adc8c7c939e5593e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -230,12 +230,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("allayBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel) this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("allayActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         AllayAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 0d7f951e3837de7553d93f3d4525276048feb405..f7aa28e6d87660a7a7bbd31a4d2dfb963fb0019f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -287,12 +287,12 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("axolotlBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel) this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("axolotlActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         AxolotlAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         if (!this.isNoAi()) {
             Optional<Integer> optional = this.getBrain().getMemory(MemoryModuleType.PLAY_DEAD_TICKS);
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
index d9104d996c854cce1ff167706c93747cd69c3969..ec1c27d9f3a30eb85380c946f516ab2e097928c9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
@@ -146,13 +146,13 @@ public class Camel extends AbstractHorse implements PlayerRideableJumping, Rider
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("camelBrain");
+        // HoloCons - remove profiler
         Brain<Camel> brain = (Brain<Camel>) this.getBrain(); // Paper - decompile fix
         brain.tick((ServerLevel)this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("camelActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         CamelAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index 63cb093e41ef9eed43c8bbb758596f8df324f47f..a6cd61413d1c48eca2d73c9a892ff9a37ab65fd4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -179,12 +179,12 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("frogBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel)this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("frogActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         FrogAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 9058f9f2e561cda9f475f33218bf7a78297de4bc..9b880493f3afa085719705ae9170eb068fba2217 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -79,12 +79,12 @@ public class Tadpole extends AbstractFish {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("tadpoleBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel) this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("tadpoleActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         TadpoleAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index e9f7c08ae3ea9c578971b1ede88788572c20e277..6c35111ecffa82afd8d3e496cb19a93674d15696 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -190,12 +190,12 @@ public class Goat extends Animal {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("goatBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel) this.level, this);
-        this.level.getProfiler().pop();
-        this.level.getProfiler().push("goatActivityUpdate");
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         GoatAi.updateActivity(this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index dd26d7b7fcae0bdab43a9b51c09011e7db761787..b92cdc18a2cbc5ab4d46df7cb986b265b7ffa845 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -198,9 +198,9 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("zoglinBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel)this.level, this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         this.updateActivity();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 5d3b3cb3a882eb5d716f678095a65b28d0967476..4052d74e2347d6222bb6c5038e23d7960da2a502 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -128,9 +128,9 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("hoglinBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel)this.level, this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         HoglinAi.updateActivity(this);
         if (this.isConverting()) {
             ++this.timeInOverworld;
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index afa7ecfa8453da510ec5ccecb1ceeb1d9893d259..7a46f45b61186e271bd07269191c53f4b14916fe 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -310,9 +310,9 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("piglinBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel) this.level, this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         PiglinAi.updateActivity(this);
         super.customServerAiStep();
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index a1fbeec73fbd11915a276ccbf490ee9b7441b6dc..9f8d0856639c34176d0c66d42812b8c34c4df00f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -85,9 +85,9 @@ public class PiglinBrute extends AbstractPiglin {
 
     @Override
     protected void customServerAiStep() {
-        this.level.getProfiler().push("piglinBruteBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick((ServerLevel)this.level, this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         PiglinBruteAi.updateActivity(this);
         PiglinBruteAi.maybePlayActivitySound(this);
         super.customServerAiStep();
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 1ae7408048f951cb94d7cfbea60efc5567b1af84..61e0dfbc66ac3922ac68609fbeadd4f781b829c3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -274,9 +274,9 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     protected void customServerAiStep() {
         ServerLevel worldserver = (ServerLevel) this.level;
 
-        worldserver.getProfiler().push("wardenBrain");
+        // HoloCons - remove profiler
         this.getBrain().tick(worldserver, this);
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         super.customServerAiStep();
         if ((this.tickCount + this.getId()) % 120 == 0) {
             Warden.applyDarknessAround(worldserver, this.position(), this, 20);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 18eac340386a396c9850f53f30d20a41c1437788..621d9f954001cfeb5bd9f2b7dc2fa3ccce786f5a 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -246,9 +246,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     @Override
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
-        this.level.getProfiler().push("villagerBrain");
+        // HoloCons - remove profiler
         if (!inactive) this.getBrain().tick((ServerLevel) this.level, this); // Paper
-        this.level.getProfiler().pop();
+        // HoloCons - remove profiler
         if (this.assignProfessionWhenSpawned) {
             this.assignProfessionWhenSpawned = false;
         }
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 5ef6b5ad4dd69a57595914c7af8422ee2f6ad054..bc53270d53fb8e186ec4d0fe4c32787c926b71f2 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -363,7 +363,7 @@ public class Explosion {
                 if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
                     BlockPos blockposition1 = blockposition.immutable();
 
-                    this.level.getProfiler().push("explosion_blocks");
+                    // HoloCons - remove profiler
                     if (block.dropFromExplosion(this)) {
                         Level world = this.level;
 
@@ -385,7 +385,7 @@ public class Explosion {
 
                     this.level.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 3);
                     block.wasExploded(this.level, blockposition, this);
-                    this.level.getProfiler().pop();
+                    // HoloCons - remove profiler
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 848dd632cdab93cc41fb2187f56c77dabf82c120..db4de8abbbc31543a689c12a2fcbae41e9e7c8a1 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -563,9 +563,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 BlockState iblockdata2 = this.getBlockState(pos);
 
                 if ((flags & 128) == 0 && iblockdata2 != iblockdata1 && (iblockdata2.getLightBlock(this, pos) != iblockdata1.getLightBlock(this, pos) || iblockdata2.getLightEmission() != iblockdata1.getLightEmission() || iblockdata2.useShapeForLightOcclusion() || iblockdata1.useShapeForLightOcclusion())) {
-                    this.getProfiler().push("queueCheckLight");
+                    // HoloCons - remove profiler
                     this.getChunkSource().getLightEngine().checkBlock(pos);
-                    this.getProfiler().pop();
+                    // HoloCons - remove profiler
                 }
 
                 /*
@@ -864,9 +864,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     protected void tickBlockEntities() {
-        ProfilerFiller gameprofilerfiller = this.getProfiler();
+        // HoloCons - remove profiler
 
-        gameprofilerfiller.push("blockEntities");
+        // HoloCons - remove profiler
         // Spigot // HoloCons - remove timings
         this.tickingBlockEntities = true;
         if (!this.pendingBlockEntityTickers.isEmpty()) {
@@ -911,7 +911,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         // Spigot // HoloCons - remove timings
         this.tickingBlockEntities = false;
         co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper
-        gameprofilerfiller.pop();
+        // HoloCons - remove profiler
         spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
@@ -1104,7 +1104,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public List<Entity> getEntities(@Nullable Entity except, AABB box, Predicate<? super Entity> predicate) {
-        this.getProfiler().incrementCounter("getEntities");
+        // HoloCons - remove profiler
         List<Entity> list = Lists.newArrayList();
         ((ServerLevel)this).getEntityLookup().getEntities(except, box, list, predicate); // Paper - optimise this call
         return list;
@@ -1123,7 +1123,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public <T extends Entity> void getEntities(EntityTypeTest<Entity, T> filter, AABB box, Predicate<? super T> predicate, List<? super T> result, int limit) {
-        this.getProfiler().incrementCounter("getEntities");
+        // HoloCons - remove profiler
         // Paper start - optimise this call
         //TODO use limit
         if (filter instanceof net.minecraft.world.entity.EntityType entityTypeTest) {
@@ -1452,7 +1452,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public ProfilerFiller getProfiler() {
-        return (ProfilerFiller) this.profiler.get();
+        return net.minecraft.util.profiling.InactiveProfiler.INSTANCE; // HoloCons - remove profiler
     }
 
     public Supplier<ProfilerFiller> getProfilerSupplier() {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index b01b19f3bbf30fa695e1e3871a19199a76454c62..a36b2ab82af844cf8fc7371b0198244018b7d236 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -132,7 +132,7 @@ public final class NaturalSpawner {
     }
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
-        world.getProfiler().push("spawner");
+        // HoloCons - remove profiler
         // Spigot // HoloCons - remove timings
         MobCategory[] aenumcreaturetype = NaturalSpawner.SPAWNING_CATEGORIES;
         int i = aenumcreaturetype.length;
@@ -189,7 +189,7 @@ public final class NaturalSpawner {
         }
 
         // Spigot // HoloCons - remove timings
-        world.getProfiler().pop();
+        // HoloCons - remove profiler
     }
 
     // Paper start
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index afe23d54bf7284fb1b171ce1a86e4247b30db8ae..5810aae8aac9c368b2e22ee2bc0e081b1f91be6e 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -1294,9 +1294,9 @@ public class LevelChunk extends ChunkAccess {
 
                 if (LevelChunk.this.isTicking(blockposition)) {
                     try {
-                        ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
+                        // HoloCons - remove profiler
 
-                        gameprofilerfiller.push(this::getType);
+                        // HoloCons - remove profiler
                         // Spigot // HoloCons - remove timings
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
@@ -1308,7 +1308,7 @@ public class LevelChunk extends ChunkAccess {
                             LevelChunk.LOGGER.warn("Block entity {} @ {} state {} invalid for ticking:", new Object[]{LogUtils.defer(this::getType), LogUtils.defer(this::getPos), iblockdata});
                         }
 
-                        gameprofilerfiller.pop();
+                        // HoloCons - remove profiler
                     } catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable; // Paper
                         // Paper start - Prevent tile entity and entity crashes
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
index d23481453717f715124156b5d83f6448f720d049..afff530b97aefbbda2807ad35babe1f01b568199 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -53,8 +53,8 @@ public class PathFinder {
     @Nullable
     // Paper start - optimize collection
     private Path findPath(ProfilerFiller profiler, Node startNode, List<Map.Entry<Target, BlockPos>> positions, float followRange, int distance, float rangeMultiplier) {
-        profiler.push("find_path");
-        profiler.markForCharting(MetricCategory.PATH_FINDING);
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         // Set<Target> set = positions.keySet();
         startNode.g = 0.0F;
         startNode.h = this.getBestH(startNode, positions); // Paper - optimize collection
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 7f1ac2cb29eb84833c0895442d611dfa0504527e..1eacf0cdf011d8feaaf71afbef3cac3dc21d7b3a 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -86,20 +86,20 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
     }
 
     public void tick(long time, int maxTicks, BiConsumer<BlockPos, T> ticker) {
-        ProfilerFiller profilerFiller = this.profiler.get();
-        profilerFiller.push("collect");
-        this.collectTicks(time, maxTicks, profilerFiller);
-        profilerFiller.popPush("run");
-        profilerFiller.incrementCounter("ticksToRun", this.toRunThisTick.size());
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
+        this.collectTicks(time, maxTicks, null); // HoloCons - remove profiler
+        // HoloCons - remove profiler
+        // HoloCons - remove profiler
         this.runCollectedTicks(ticker);
-        profilerFiller.popPush("cleanup");
+        // HoloCons - remove profiler
         this.cleanupAfterTick();
-        profilerFiller.pop();
+        // HoloCons - remove profiler
     }
 
     private void collectTicks(long time, int maxTicks, ProfilerFiller profiler) {
         this.sortContainersToTick(time);
-        profiler.incrementCounter("containersToTick", this.containersToTick.size());
+        // HoloCons - remove profiler
         this.drainContainers(time, maxTicks);
         this.rescheduleLeftoverContainers();
     }
